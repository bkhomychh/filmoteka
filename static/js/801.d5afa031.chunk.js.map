{"version":3,"file":"static/js/801.d5afa031.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Movie/Movie.module.scss?674c","components/Movie/Movie.jsx","webpack://filmoteka/./src/components/MovieList/MovieList.module.scss?f9f6","components/MovieList/MovieList.jsx","webpack://filmoteka/./src/components/SearchForm/SearchForm.module.scss?5dd0","components/SearchForm/SearchForm.jsx","pages/Search.jsx","services/moviesAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Movie_link__TtNxb\",\"poster\":\"Movie_poster__O4gfr\",\"icon\":\"Movie_icon__zxB3-\",\"title\":\"Movie_title__9f19-\",\"score\":\"Movie_score__ya-UI\"};","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { getDataFromLocalStorage } from 'services/localStorage';\nimport { IMAGE_BASE_URL } from 'utils/constants';\n\nimport { FaBookmark } from 'react-icons/fa';\nimport { AiFillStar } from 'react-icons/ai';\nimport imagePlaceHolder from 'assets/images/image-place-holder.png';\nimport styles from './Movie.module.scss';\n\nconst Movie = ({ movie, location }) => {\n  const { id, title, poster_path, vote_average } = movie;\n  const imgUrl = poster_path ? IMAGE_BASE_URL + poster_path : imagePlaceHolder;\n\n  const data = getDataFromLocalStorage('movies');\n  const isSaved = data ? data.some(el => el.id === id) : false;\n\n  return (\n    <>\n      <Link\n        className={styles.link}\n        to={`/search/${id}`}\n        state={{ from: location }}\n      >\n        <img\n          className={styles.poster}\n          src={imgUrl}\n          alt={title}\n          loading=\"lazy\"\n        />\n        {isSaved && <FaBookmark className={styles.icon} />}\n      </Link>\n      <h3 className={styles.title}>{title}</h3>\n      <p className={styles.score}>\n        {vote_average.toFixed(1)} <AiFillStar />\n      </p>\n    </>\n  );\n};\n\nMovie.propTypes = {\n  movie: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Movie;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__psP2f\",\"item\":\"MovieList_item__uj8y-\"};","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Movie from 'components/Movie';\nimport styles from './MovieList.module.scss';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={styles.list}>\n      {movies.map(movie => (\n        <li className={styles.item} key={movie.id}>\n          <Movie movie={movie} location={location} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__49W6b\",\"searchField\":\"SearchForm_searchField__tZNSU\",\"btn\":\"SearchForm_btn__aI1lD\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { GoSearch } from 'react-icons/go';\nimport styles from './SearchForm.module.scss';\n\nconst SearchForm = ({ updateQueryString, searchQuery }) => {\n  const [inputValue, setInputValue] = useState(searchQuery ?? '');\n  const { t } = useTranslation();\n\n  const handleChange = ({ target }) => {\n    setInputValue(target.value.trim());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    updateQueryString(inputValue);\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <input\n        className={styles.searchField}\n        type=\"text\"\n        placeholder={`${t('search.title')}...`}\n        name=\"query\"\n        value={inputValue}\n        onChange={handleChange}\n      />\n      <button className={styles.btn} type=\"submit\">\n        <GoSearch />\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  updateQueryString: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string,\n};\n\nexport default SearchForm;\n","import { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport SearchForm from 'components/SearchForm/';\nimport MovieList from 'components/MovieList';\nimport PageLoader from 'components/PageLoader';\nimport { getMoviesBySearchQuery } from 'services/moviesAPI';\nimport { STATUS } from 'utils/constants';\n\nimport { toast } from 'react-toastify';\n\nconst Search = () => {\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movies, setMovies] = useState([]);\n  const toastId = useRef(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    setStatus(STATUS.PENDING);\n    getMoviesBySearchQuery(searchQuery, language)\n      .then(res => {\n        setMovies(res);\n        setStatus(STATUS.RESOLVED);\n\n        // removing duplicate notifications\n        if (res.length < 1 && !toast.isActive(toastId.current)) {\n          toastId.current = toast.error(t('search.message.failure'));\n        }\n      })\n      .catch(err => {\n        // removing duplicate notifications\n        if (!toast.isActive(toastId.current)) {\n          toastId.current = toast.error(err.message);\n        }\n        setStatus(STATUS.REJECTED);\n      });\n  }, [searchQuery, t, language]);\n\n  const updateQueryString = query => {\n    const newParams = query ? { query } : {};\n    setSearchParams(newParams);\n  };\n\n  return (\n    <>\n      <h1>{t('search.title')}</h1>\n      <SearchForm\n        updateQueryString={updateQueryString}\n        searchQuery={searchQuery}\n      />\n      {status === STATUS.PENDING && <PageLoader />}\n      {status === STATUS.RESOLVED && movies.length > 0 && (\n        <MovieList movies={movies} />\n      )}\n      {status === STATUS.RESOLVED && Number(movies.length) === 0 && (\n        <p>{t('search.message.failure')}</p>\n      )}\n      {status === STATUS.REJECTED && <p>{t('search.message.error')}</p>}\n    </>\n  );\n};\n\nexport default Search;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY, RESOURCE } from 'utils/constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst getTrendingMovies = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.trending, options).then(res => res.data.results);\n};\n\nconst getGenreList = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.genres, options).then(res => res.data.genres);\n};\n\nconst getMoviesBySearchQuery = (query, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get(RESOURCE.search, options).then(res => res.data.results);\n};\n\nconst getMoviesByGenre = (genreId, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get(RESOURCE.discover, options).then(res => res.data.results);\n};\n\nconst getMovieDetails = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get(RESOURCE.movieDetails(id), options).then(res => res.data);\n};\n\nconst getMovieCredits = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieCredits(id), options)\n    .then(res => res.data.cast);\n};\n\nconst getMovieReviews = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieReviews(id), options)\n    .then(res => res.data.results);\n};\n\nconst getVideos = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.videos(id), options).then(res => res.data.results);\n};\n\nexport {\n  getTrendingMovies,\n  getGenreList,\n  getMoviesBySearchQuery,\n  getMoviesByGenre,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n  getVideos,\n};\n"],"names":["movie","location","id","title","poster_path","vote_average","imgUrl","IMAGE_BASE_URL","imagePlaceHolder","data","getDataFromLocalStorage","isSaved","some","el","className","styles","to","state","from","src","alt","loading","toFixed","movies","useLocation","map","Movie","updateQueryString","searchQuery","useState","inputValue","setInputValue","t","useTranslation","onSubmit","evt","preventDefault","autoComplete","type","placeholder","name","value","onChange","target","trim","STATUS","status","setStatus","setMovies","toastId","useRef","useSearchParams","searchParams","setSearchParams","get","language","i18n","useEffect","getMoviesBySearchQuery","then","res","length","toast","current","catch","err","message","query","PageLoader","MovieList","Number","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","RESOURCE","results","getGenreList","genres","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieCredits","cast","getMovieReviews","getVideos"],"sourceRoot":""}