{"version":3,"file":"static/js/241.6d193128.chunk.js","mappings":"+QACA,EAA0B,sBAA1B,EAAwD,oBAAxD,EAAkF,kBAAlF,EAA2G,mBAA3G,EAA0I,wB,mBC0F1I,EAzEa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAGIE,EAAAA,EAAAA,MAFFC,EADF,EACEA,EACQC,EAFV,EAEEC,KAAQD,SAWIE,GAASC,EAAAA,EAAAA,GAAS,CAC9BC,SAAU,CAAC,OAAQR,EAASI,GAC5BK,QAVoB,WACpB,OAAKT,GAGIU,EAAAA,EAAAA,IAAgBV,EAASI,GAFzB,EAIV,EAKCO,QAAS,SAACC,GAAD,OAAgBC,EAAAA,GAAAA,MAAYD,EAAIE,QAAhC,IAHHC,KAMFC,EAA6B,CACjCC,cAAe,EACfC,eAAgB,EAChBC,aAAc,GACdC,WAAY,CAAEC,WAAW,GACzBC,YAAY,EACZC,MAAO,IACPC,SAAU,CACRC,MAAO,KACPC,mBAAmB,GAErBC,QAAS,CAACC,EAAAA,GAAYC,EAAAA,IACtBC,YAAa,CACX,IAAK,CACHb,cAAe,EACfC,eAAgB,GAElB,KAAM,CACJD,cAAe,EACfC,eAAgB,KAKtB,OACE,8BACGZ,IACEA,EAAKyB,OAAS,GACb,SAAC,MAAD,gBAAQC,UAAWC,GAAoBjB,GAAvC,aACGV,EAAK4B,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC7BC,EAASF,EAAeG,EAAAA,GAAiBH,EAAeI,EAE9D,OACE,UAAC,KAAD,YACE,gBAAKT,UAAWC,EAAhB,UACE,gBAAKD,UAAWC,EAAYS,IAAKH,EAAQI,IAAKP,EAAMQ,QAAQ,YAE9D,cAAGZ,UAAWC,EAAd,SAA4BG,KAC5B,eAAGJ,UAAWC,EAAd,WACE,4BAAO9B,EAAE,kBAAT,OADF,IACuCmC,OANvBH,EAUrB,QAGH,uBAAIhC,EAAE,4BAIf,C,qRCpFD0C,EAAAA,EAAAA,SAAAA,QAAyBC,EAAAA,GACzBD,EAAAA,EAAAA,SAAAA,OAAwB,CACtBE,QAASC,EAAAA,IAGJ,IAAMC,EAAiB,mCAAG,yGAAO7C,EAAP,+BAAkB,KAC3C8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFmB,kBAIxByC,EAAAA,EAAAA,IAAwB,sBAAuBK,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKuC,OAAb,KAJxC,2CAAH,qDAOjBC,EAAY,mCAAG,yGAAOnD,EAAP,+BAAkB,KACtC8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFc,kBAInByC,EAAAA,EAAAA,IAAsB,mBAAoBK,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKyC,MAAb,KAJxC,2CAAH,qDAOZC,EAAsB,mCAAG,WAAOC,GAAP,4FAAsBtD,EAAtB,+BAAiC,KAC/D8C,EAAU,CACdC,OAAQ,CAAEO,MAAAA,EAAOtD,SAAAA,IAFiB,kBAI7ByC,EAAAA,EAAAA,IAAwB,eAAgBK,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKuC,OAAb,KAJ5B,2CAAH,sDAOtBK,EAAgB,mCAAG,WAAOC,GAAP,4FAAwBxD,EAAxB,+BAAmC,KAC3D8C,EAAU,CACdC,OAAQ,CACNU,YAAaD,EACbE,QAAS,kBACT,mBAAoB,EACpB,2BAA4B,aAC5B1D,SAAAA,IAP0B,kBAWvByC,EAAAA,EAAAA,IAAwB,iBAAkBK,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKuC,OAAb,KAXpC,2CAAH,sDAchBS,EAAe,mCAAG,WAAO5B,GAAP,4FAAmB/B,EAAnB,+BAA8B,KACrD8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFiB,kBAKtByC,EAAAA,EAAAA,IAAA,gBAA2BV,GAAMe,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,IAAR,KAL5B,2CAAH,sDAQfL,EAAe,mCAAG,WAAOyB,GAAP,4FAAmB/B,EAAnB,+BAA8B,KACrD8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFiB,kBAItByC,EAAAA,EAAAA,IAAA,gBAAiCV,EAAjC,YAA+Ce,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKT,IAAb,KAJ1C,2CAAH,sDAOf0D,EAAe,mCAAG,WAAO7B,GAAP,4FAAmB/B,EAAnB,+BAA8B,KACrD8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFiB,kBAItByC,EAAAA,EAAAA,IAAA,gBAAkCV,EAAlC,YAAgDe,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKuC,OAAb,KAJ3C,2CAAH,sDAOfW,EAAS,mCAAG,WAAO9B,GAAP,4FAAmB/B,EAAnB,+BAA8B,KAC/C8C,EAAU,CACdC,OAAQ,CAAE/C,SAAAA,IAFW,kBAIhByC,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,WAAgCe,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAItC,KAAKuC,OAAb,KAJjC,2CAAH,qD","sources":["webpack://filmoteka/./src/components/Cast/Cast.module.scss?0e19","components/Cast/Cast.tsx","services/moviesAPI.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Cast_wrapper__0vlTg\",\"thumb\":\"Cast_thumb__bHF1L\",\"img\":\"Cast_img__-6jA+\",\"name\":\"Cast_name__SF9Yl\",\"character\":\"Cast_character__hZ8ZQ\"};","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { Pagination, Autoplay } from 'swiper';\nimport { Swiper, SwiperProps, SwiperSlide } from 'swiper/react';\nimport 'swiper/scss';\nimport 'swiper/scss/pagination';\nimport 'swiper/scss/scrollbar';\n\nimport { getMovieCredits } from 'services/moviesAPI';\nimport { IMAGE_BASE_URL } from 'utils/constants';\n\nimport styles from './Cast.module.scss';\nimport defaultImg from 'assets/images/default-avatar.webp';\nimport type { IActor } from 'types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  const fetchCastInfo = (): Promise<IActor[]> | [] => {\n    if (!movieId) {\n      return [];\n    } else {\n      return getMovieCredits(movieId, language);\n    }\n  };\n\n  const { data: cast } = useQuery({\n    queryKey: ['cast', movieId, language],\n    queryFn: fetchCastInfo,\n    onError: (err: Error) => toast.error(err.message),\n  });\n\n  const sliderOptions: SwiperProps = {\n    slidesPerView: 3,\n    slidesPerGroup: 3,\n    spaceBetween: 20,\n    pagination: { clickable: true },\n    grabCursor: true,\n    speed: 750,\n    autoplay: {\n      delay: 7500,\n      pauseOnMouseEnter: true,\n    },\n    modules: [Pagination, Autoplay],\n    breakpoints: {\n      768: {\n        slidesPerView: 5,\n        slidesPerGroup: 5,\n      },\n      1200: {\n        slidesPerView: 7,\n        slidesPerGroup: 7,\n      },\n    },\n  };\n\n  return (\n    <>\n      {cast &&\n        (cast.length > 0 ? (\n          <Swiper className={styles.wrapper} {...sliderOptions}>\n            {cast.map(({ id, name, profile_path, character }) => {\n              const imgUrl = profile_path ? IMAGE_BASE_URL + profile_path : defaultImg;\n\n              return (\n                <SwiperSlide key={id}>\n                  <div className={styles.thumb}>\n                    <img className={styles.img} src={imgUrl} alt={name} loading=\"lazy\" />\n                  </div>\n                  <p className={styles.name}>{name}</p>\n                  <p className={styles.character}>\n                    <span>{t('cast.character')}:</span> {character}\n                  </p>\n                </SwiperSlide>\n              );\n            })}\n          </Swiper>\n        ) : (\n          <p>{t('cast.message.failure')}</p>\n        ))}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY } from 'utils/constants';\nimport type { IMovie, IGenreList, IFoundMovies, IFoundReviews, FoundCredits } from 'types';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundMovies>('trending/movie/week', options).then(res => res.data.results);\n};\n\nexport const getGenreList = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IGenreList>('genre/movie/list', options).then(res => res.data.genres);\n};\n\nexport const getMoviesBySearchQuery = async (query: string, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get<IFoundMovies>('search/movie', options).then(res => res.data.results);\n};\n\nexport const getMoviesByGenre = async (genreId: string, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get<IFoundMovies>('discover/movie', options).then(res => res.data.results);\n};\n\nexport const getMovieDetails = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get<IMovie>(`movie/${id}`, options).then(res => res.data);\n};\n\nexport const getMovieCredits = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<FoundCredits>(`movie/${id}/credits`, options).then(res => res.data.cast);\n};\n\nexport const getMovieReviews = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundReviews>(`movie/${id}/reviews`, options).then(res => res.data.results);\n};\n\nexport const getVideos = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(`movie/${id}/videos`, options).then(res => res.data.results);\n};\n"],"names":["movieId","useParams","useTranslation","t","language","i18n","cast","useQuery","queryKey","queryFn","getMovieCredits","onError","err","toast","message","data","sliderOptions","slidesPerView","slidesPerGroup","spaceBetween","pagination","clickable","grabCursor","speed","autoplay","delay","pauseOnMouseEnter","modules","Pagination","Autoplay","breakpoints","length","className","styles","map","id","name","profile_path","character","imgUrl","IMAGE_BASE_URL","defaultImg","src","alt","loading","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","then","res","results","getGenreList","genres","getMoviesBySearchQuery","query","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieReviews","getVideos"],"sourceRoot":""}