{"version":3,"file":"static/js/630.afdb54d2.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Reviews/Reviews.module.scss?0ade","components/Reviews/Reviews.jsx","services/moviesAPI.js","utils/formatting.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Reviews_wrapper__ei3h9\",\"author\":\"Reviews_author__GC1-s\",\"content\":\"Reviews_content__mLlQv\",\"link\":\"Reviews_link__2WRrQ\",\"releaseDate\":\"Reviews_releaseDate__9hRAK\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { toast } from 'react-toastify';\nimport { cutString, formatDate } from 'utils/formatting';\nimport { getMovieReviews } from 'services/moviesAPI';\n\nimport { Pagination, Autoplay } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/scss';\nimport 'swiper/scss/pagination';\nimport 'swiper/scss/scrollbar';\n\nimport styles from './Reviews.module.scss';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  // fetching data\n  useEffect(() => {\n    getMovieReviews(movieId, language)\n      .then(res => setReviews(res))\n      .catch(err => toast.error(err.message));\n  }, [movieId, language]);\n\n  const sliderOptions = {\n    slidesPerView: 1,\n    spaceBetween: 20,\n    pagination: { clickable: true },\n    grabCursor: true,\n    autoplay: {\n      delay: 7500,\n      pauseOnMouseEnter: true,\n    },\n    modules: [Pagination, Autoplay],\n  };\n\n  return (\n    <>\n      {reviews &&\n        (reviews.length > 0 ? (\n          <Swiper className={styles.wrapper} {...sliderOptions}>\n            {reviews.map(({ id, author, content, created_at, url }) => (\n              <SwiperSlide key={id}>\n                <p className={styles.author}>{author}</p>\n                <p className={styles.content}>{cutString(content)}</p>\n                <a\n                  className={styles.link}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer nofollow\"\n                >\n                  {t('reviews.btnText')}\n                </a>\n                <p className={styles.releaseDate}>{formatDate(created_at)}</p>\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        ) : (\n          <p>{t('reviews.message.failure')}</p>\n        ))}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY, RESOURCE } from 'utils/constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst getTrendingMovies = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.trending, options).then(res => res.data.results);\n};\n\nconst getGenreList = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.genres, options).then(res => res.data.genres);\n};\n\nconst getMoviesBySearchQuery = (query, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get(RESOURCE.search, options).then(res => res.data.results);\n};\n\nconst getMoviesByGenre = (genreId, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get(RESOURCE.discover, options).then(res => res.data.results);\n};\n\nconst getMovieDetails = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get(RESOURCE.movieDetails(id), options).then(res => res.data);\n};\n\nconst getMovieCredits = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieCredits(id), options)\n    .then(res => res.data.cast);\n};\n\nconst getMovieReviews = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieReviews(id), options)\n    .then(res => res.data.results);\n};\n\nconst getVideos = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.videos(id), options).then(res => res.data.results);\n};\n\nexport {\n  getTrendingMovies,\n  getGenreList,\n  getMoviesBySearchQuery,\n  getMoviesByGenre,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n  getVideos,\n};\n","const formatDate = releaseDate => {\n  const date = new Date(releaseDate);\n  const formattedDate = date\n    .toLocaleString()\n    .split(',')\n    .slice(0, 1)\n    .toString()\n    .replaceAll('/', '.');\n  const dateElements = formattedDate.split('.');\n\n  return dateElements.map(el => el.padStart(2, '0')).join('.');\n};\n\nconst cutString = str => {\n  return str.split(' ').slice(0, 70).join(' ') + '... ';\n};\n\nexport { formatDate, cutString };\n"],"names":["useState","reviews","setReviews","movieId","useParams","useTranslation","t","language","i18n","useEffect","getMovieReviews","then","res","catch","err","toast","message","sliderOptions","slidesPerView","spaceBetween","pagination","clickable","grabCursor","autoplay","delay","pauseOnMouseEnter","modules","Pagination","Autoplay","length","className","styles","map","id","author","content","created_at","url","cutString","href","target","rel","formatDate","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","RESOURCE","data","results","getGenreList","genres","getMoviesBySearchQuery","query","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieCredits","cast","getVideos","releaseDate","Date","toLocaleString","split","slice","toString","replaceAll","el","padStart","join","str"],"sourceRoot":""}