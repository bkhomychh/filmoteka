{"version":3,"file":"static/js/549.6500feb6.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Reviews/Reviews.module.scss?0ade","components/Reviews/Reviews.tsx","services/moviesAPI.ts","utils/formatting.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Reviews_wrapper__ei3h9\",\"author\":\"Reviews_author__GC1-s\",\"content\":\"Reviews_content__mLlQv\",\"link\":\"Reviews_link__2WRrQ\",\"releaseDate\":\"Reviews_releaseDate__9hRAK\"};","import { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { Pagination, Autoplay } from 'swiper';\nimport { Swiper, SwiperProps, SwiperSlide } from 'swiper/react';\nimport 'swiper/scss';\nimport 'swiper/scss/pagination';\nimport 'swiper/scss/scrollbar';\n\nimport { cutString, formatDate } from 'utils/formatting';\nimport { getMovieReviews } from 'services/moviesAPI';\nimport styles from './Reviews.module.scss';\n\nimport type { IReview } from 'types';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  const fetchReviews = (): Promise<IReview[]> | [] => {\n    if (!movieId) {\n      return [];\n    }\n    return getMovieReviews(movieId, language);\n  };\n\n  const { data: reviews } = useQuery({\n    queryKey: ['reviews', movieId, language],\n    queryFn: fetchReviews,\n    onError: (err: Error) => toast.error(err.message),\n  });\n\n  const sliderOptions: SwiperProps = {\n    slidesPerView: 1,\n    spaceBetween: 20,\n    pagination: { clickable: true },\n    grabCursor: true,\n    autoplay: {\n      delay: 7500,\n      pauseOnMouseEnter: true,\n    },\n    modules: [Pagination, Autoplay],\n  };\n\n  return (\n    <>\n      {reviews &&\n        (reviews.length > 0 ? (\n          <Swiper className={styles.wrapper} {...sliderOptions}>\n            {reviews.map(({ id, author, content, created_at, url }) => (\n              <SwiperSlide key={id}>\n                <p className={styles.author}>{author}</p>\n                <p className={styles.content}>{cutString(content)}</p>\n                <a\n                  className={styles.link}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer nofollow\"\n                >\n                  {t('reviews.btnText')}\n                </a>\n                <p className={styles.releaseDate}>{formatDate(created_at)}</p>\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        ) : (\n          <p>{t('reviews.message.failure')}</p>\n        ))}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY } from 'utils/constants';\nimport type { IMovie, IGenreList, IFoundMovies, IFoundReviews, FoundCredits } from 'types';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundMovies>('trending/movie/week', options).then(res => res.data.results);\n};\n\nexport const getGenreList = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IGenreList>('genre/movie/list', options).then(res => res.data.genres);\n};\n\nexport const getMoviesBySearchQuery = async (query: string, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get<IFoundMovies>('search/movie', options).then(res => res.data.results);\n};\n\nexport const getMoviesByGenre = async (genreId: string, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get<IFoundMovies>('discover/movie', options).then(res => res.data.results);\n};\n\nexport const getMovieDetails = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get<IMovie>(`movie/${id}`, options).then(res => res.data);\n};\n\nexport const getMovieCredits = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<FoundCredits>(`movie/${id}/credits`, options).then(res => res.data.cast);\n};\n\nexport const getMovieReviews = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundReviews>(`movie/${id}/reviews`, options).then(res => res.data.results);\n};\n\nexport const getVideos = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(`movie/${id}/videos`, options).then(res => res.data.results);\n};\n","export const formatDate = (date: string): string => {\n  const dateObj = new Date(date);\n  const formattedDate = dateObj.toLocaleDateString();\n  const dateElements = formattedDate.split('/');\n\n  return dateElements.map(el => el.padStart(2, '0')).join('.');\n};\n\nexport const cutString = (str: string): string => {\n  return str.split(' ').slice(0, 70).join(' ') + '... ';\n};\n"],"names":["movieId","useParams","useTranslation","t","language","i18n","reviews","useQuery","queryKey","queryFn","getMovieReviews","onError","err","toast","message","data","sliderOptions","slidesPerView","spaceBetween","pagination","clickable","grabCursor","autoplay","delay","pauseOnMouseEnter","modules","Pagination","Autoplay","length","className","styles","map","id","author","content","created_at","url","cutString","href","target","rel","formatDate","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","then","res","results","getGenreList","genres","getMoviesBySearchQuery","query","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieCredits","cast","getVideos","date","Date","toLocaleDateString","split","el","padStart","join","str","slice"],"sourceRoot":""}