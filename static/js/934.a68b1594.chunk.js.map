{"version":3,"file":"static/js/934.a68b1594.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Cast/Cast.module.scss?0e19","components/Cast/Cast.jsx","services/moviesAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Cast_wrapper__0vlTg\",\"thumb\":\"Cast_thumb__bHF1L\",\"img\":\"Cast_img__-6jA+\",\"name\":\"Cast_name__SF9Yl\",\"character\":\"Cast_character__hZ8ZQ\"};","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Pagination, Autoplay } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/scss';\nimport 'swiper/scss/pagination';\nimport 'swiper/scss/scrollbar';\n\nimport { getMovieCredits } from 'services/moviesAPI';\nimport { IMAGE_BASE_URL } from 'utils/constants';\n\nimport styles from './Cast.module.scss';\nimport defaultImg from 'assets/images/default-avatar.webp';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  useEffect(() => {\n    getMovieCredits(movieId, language)\n      .then(res => setCast(res))\n      .catch(err => toast.error(err.message));\n  }, [movieId, language]);\n\n  const sliderOptions = {\n    slidesPerView: 3,\n    slidesPerGroup: 3,\n    spaceBetween: 20,\n    pagination: { clickable: true },\n    grabCursor: true,\n    speed: 750,\n    autoplay: {\n      delay: 7500,\n      pauseOnMouseEnter: true,\n    },\n    modules: [Pagination, Autoplay],\n    breakpoints: {\n      768: {\n        slidesPerView: 5,\n        slidesPerGroup: 5,\n      },\n      1200: {\n        slidesPerView: 7,\n        slidesPerGroup: 7,\n      },\n    },\n  };\n\n  return (\n    <>\n      {cast &&\n        (cast.length > 0 ? (\n          <Swiper className={styles.wrapper} {...sliderOptions}>\n            {cast.map(({ id, name, profile_path, character }) => {\n              const imgUrl = profile_path\n                ? IMAGE_BASE_URL + profile_path\n                : defaultImg;\n\n              return (\n                <SwiperSlide key={id}>\n                  <div className={styles.thumb}>\n                    <img className={styles.img} src={imgUrl} alt={name} />\n                  </div>\n                  <p className={styles.name}>{name}</p>\n                  <p className={styles.character}>\n                    <span>{t('cast.character')}:</span> {character}\n                  </p>\n                </SwiperSlide>\n              );\n            })}\n          </Swiper>\n        ) : (\n          <p>{t('cast.message.failure')}</p>\n        ))}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY, RESOURCE } from 'utils/constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst getTrendingMovies = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.trending, options).then(res => res.data.results);\n};\n\nconst getGenreList = (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.genres, options).then(res => res.data.genres);\n};\n\nconst getMoviesBySearchQuery = (query, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get(RESOURCE.search, options).then(res => res.data.results);\n};\n\nconst getMoviesByGenre = (genreId, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get(RESOURCE.discover, options).then(res => res.data.results);\n};\n\nconst getMovieDetails = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get(RESOURCE.movieDetails(id), options).then(res => res.data);\n};\n\nconst getMovieCredits = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieCredits(id), options)\n    .then(res => res.data.cast);\n};\n\nconst getMovieReviews = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios\n    .get(RESOURCE.movieReviews(id), options)\n    .then(res => res.data.results);\n};\n\nconst getVideos = (id, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(RESOURCE.videos(id), options).then(res => res.data.results);\n};\n\nexport {\n  getTrendingMovies,\n  getGenreList,\n  getMoviesBySearchQuery,\n  getMoviesByGenre,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n  getVideos,\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useTranslation","t","language","i18n","useEffect","getMovieCredits","then","res","catch","err","toast","message","sliderOptions","slidesPerView","slidesPerGroup","spaceBetween","pagination","clickable","grabCursor","speed","autoplay","delay","pauseOnMouseEnter","modules","Pagination","Autoplay","breakpoints","length","className","styles","map","id","name","profile_path","character","imgUrl","IMAGE_BASE_URL","defaultImg","src","alt","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","RESOURCE","data","results","getGenreList","genres","getMoviesBySearchQuery","query","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieReviews","getVideos"],"sourceRoot":""}