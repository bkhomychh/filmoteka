{"version":3,"file":"static/js/846.c940eca1.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Movie/Movie.module.scss?674c","components/Movie/Movie.jsx","webpack://filmoteka/./src/components/MovieCarousel/MovieCarousel.module.scss?517c","components/MovieCarousel/MovieCarousel.jsx","pages/Home.jsx","services/moviesAPI.js","utils/constants.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Movie_link__TtNxb\",\"poster\":\"Movie_poster__O4gfr\",\"icon\":\"Movie_icon__zxB3-\",\"title\":\"Movie_title__9f19-\",\"score\":\"Movie_score__ya-UI\"};","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { FaBookmark } from 'react-icons/fa';\nimport { AiFillStar } from 'react-icons/ai';\n\nimport { getDataFromLocalStorage } from 'services/localStorage';\nimport { IMAGE_BASE_URL } from 'utils/constants';\n\nimport imagePlaceHolder from 'assets/images/image-place-holder.png';\nimport styles from './Movie.module.scss';\n\nconst Movie = ({ movie, location }) => {\n  const { id, title, poster_path, vote_average } = movie;\n  const imgUrl = poster_path ? IMAGE_BASE_URL + poster_path : imagePlaceHolder;\n\n  const data = getDataFromLocalStorage('movies');\n  const isSaved = data ? data.some(el => el.id === id) : false;\n\n  return (\n    <>\n      <Link\n        className={styles.link}\n        to={`/search/${id}`}\n        state={{ from: location }}\n      >\n        <img className={styles.poster} src={imgUrl} alt={title} />\n        {isSaved && <FaBookmark className={styles.icon} />}\n      </Link>\n      <h3 className={styles.title}>{title}</h3>\n      <p className={styles.score}>\n        {vote_average.toFixed(1)} <AiFillStar />\n      </p>\n    </>\n  );\n};\n\nMovie.propTypes = {\n  movie: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Movie;\n","// extracted by mini-css-extract-plugin\nexport default {\"genre\":\"MovieCarousel_genre__iWB+w\",\"card\":\"MovieCarousel_card__1KFGD\",\"wrapper\":\"MovieCarousel_wrapper__i-8Vn\"};","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/scss';\nimport 'swiper/scss/navigation';\nimport 'swiper/scss/controller';\nimport { useInView } from 'react-intersection-observer';\n\nimport Movie from 'components/Movie/Movie';\nimport PageLoader from 'components/PageLoader';\n\nimport { getTrendingMovies, getMoviesByGenre } from 'services/moviesAPI';\nimport { GENRE, STATUS } from 'utils/constants';\n\nimport styles from './MovieCarousel.module.scss';\n\nconst MovieCarousel = ({ genre: { name, id } }) => {\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movies, setMovies] = useState([]);\n  const sliderOptions = {\n    slidesPerView: 3,\n    spaceBetween: 20,\n    navigation: true,\n    modules: [Navigation],\n    breakpoints: {\n      768: {\n        slidesPerView: 5,\n      },\n      1200: {\n        slidesPerView: 7,\n      },\n    },\n  };\n  const location = useLocation();\n  const { ref, inView } = useInView({\n    triggerOnce: true,\n    threshold: 1,\n    rootMargin: '100px',\n    initialInView: false,\n  });\n\n  useEffect(() => {\n    if (!inView) {\n      return;\n    }\n\n    setStatus(STATUS.PENDING);\n\n    if (name === GENRE.TRENDING) {\n      getTrendingMovies()\n        .then(res => {\n          setMovies(res);\n          setStatus(STATUS.RESOLVED);\n        })\n        .catch(err => {\n          console.log(err);\n          setStatus(STATUS.REJECTED);\n        });\n      return;\n    }\n\n    getMoviesByGenre(id)\n      .then(res => {\n        setMovies(res);\n        setStatus(STATUS.RESOLVED);\n      })\n      .catch(err => {\n        console.log(err);\n        setStatus(STATUS.REJECTED);\n      });\n  }, [name, id, inView]);\n\n  return (\n    <div className={styles.wrapper}>\n      <h2 className={styles.genre} ref={ref}>\n        {name}\n      </h2>\n      {status === STATUS.PENDING && <PageLoader />}\n      {status === STATUS.RESOLVED && movies.length > 0 && (\n        <Swiper {...sliderOptions}>\n          {movies.map(movie => (\n            <SwiperSlide className={styles.card} key={movie.id}>\n              <Movie movie={movie} location={location} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      )}\n    </div>\n  );\n};\n\nMovieCarousel.propTypes = {\n  genre: PropTypes.object.isRequired,\n};\n\nexport default MovieCarousel;\n","import { useEffect, useState } from 'react';\n\nimport MovieCarousel from 'components/MovieCarousel';\nimport { getGenreList } from 'services/moviesAPI';\nimport { GENRE } from 'utils/constants';\n\nconst Home = () => {\n  const [genres, setGenres] = useState([]);\n\n  useEffect(() => {\n    getGenreList().then(res => {\n      const newGenres = res.map(genre => genre);\n      setGenres(newGenres);\n    });\n  }, []);\n\n  return (\n    <>\n      <MovieCarousel genre={{ name: GENRE.TRENDING }} />\n      {genres.length > 0 &&\n        genres.map(genre => <MovieCarousel key={genre.id} genre={genre} />)}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY, RESOURCE } from 'utils/constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst getTrendingMovies = () => {\n  return axios.get(RESOURCE.trending).then(res => res.data.results);\n};\n\nconst getGenreList = () => {\n  return axios.get(RESOURCE.genres).then(res => res.data.genres);\n};\n\nconst getMoviesBySearchQuery = searchQuery => {\n  const options = {\n    params: {\n      query: searchQuery,\n    },\n  };\n\n  return axios.get(RESOURCE.search, options).then(res => res.data.results);\n};\n\nconst getMoviesByGenre = genreId => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n    },\n  };\n\n  return axios.get(RESOURCE.discover, options).then(res => res.data.results);\n};\n\nconst getMovieDetails = id => {\n  return axios.get(RESOURCE.movieDetails(id)).then(res => res.data);\n};\n\nconst getMovieCredits = id => {\n  return axios.get(RESOURCE.movieCredits(id)).then(res => res.data.cast);\n};\n\nconst getMovieReviews = id => {\n  return axios.get(RESOURCE.movieReviews(id)).then(res => res.data.results);\n};\n\nconst getVideos = id => {\n  return axios.get(RESOURCE.videos(id)).then(res => res.data.results);\n};\n\nexport {\n  getTrendingMovies,\n  getGenreList,\n  getMoviesBySearchQuery,\n  getMoviesByGenre,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n  getVideos,\n};\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\nconst API_KEY = '9e68854d69dbd1100bcb425bc2f51530';\n\nconst RESOURCE = {\n  trending: 'trending/movie/week',\n  genres: 'genre/movie/list',\n  search: 'search/movie',\n  discover: 'discover/movie',\n  videos: id => `movie/${id}/videos`,\n  movieDetails: id => `movie/${id}`,\n  movieCredits: id => `movie/${id}/credits`,\n  movieReviews: id => `movie/${id}/reviews`,\n};\n\nconst GENRE = {\n  ACTION: 'action',\n  ANIMATION: 'animation',\n  COMEDY: 'comedy',\n  CRIME: 'crime',\n  DOCUMENTARY: 'documentary',\n  FANTASY: 'fantasy',\n  HORROR: 'horror',\n  THRILLER: 'thriller',\n  TRENDING: 'trending',\n  WESTERN: 'western',\n};\n\nconst STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nexport { BASE_URL, IMAGE_BASE_URL, API_KEY, RESOURCE, GENRE, STATUS };\n"],"names":["movie","location","id","title","poster_path","vote_average","imgUrl","IMAGE_BASE_URL","imagePlaceHolder","data","getDataFromLocalStorage","isSaved","some","el","className","styles","to","state","from","src","alt","toFixed","genre","name","useState","STATUS","status","setStatus","movies","setMovies","sliderOptions","slidesPerView","spaceBetween","navigation","modules","Navigation","breakpoints","useLocation","useInView","triggerOnce","threshold","rootMargin","initialInView","ref","inView","useEffect","GENRE","getMoviesByGenre","then","res","catch","err","console","log","getTrendingMovies","PageLoader","length","map","Movie","genres","setGenres","getGenreList","newGenres","axios","BASE_URL","api_key","API_KEY","RESOURCE","results","getMoviesBySearchQuery","searchQuery","options","params","query","genreId","with_genres","sort_by","getMovieDetails","getVideos","trending","search","discover","videos","movieDetails","movieCredits","movieReviews","ACTION","ANIMATION","COMEDY","CRIME","DOCUMENTARY","FANTASY","HORROR","THRILLER","TRENDING","WESTERN","IDLE","PENDING","REJECTED","RESOLVED"],"sourceRoot":""}