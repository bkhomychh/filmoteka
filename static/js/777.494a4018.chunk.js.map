{"version":3,"file":"static/js/777.494a4018.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Movie/Movie.module.scss?674c","components/Movie/Movie.tsx","webpack://filmoteka/./src/components/MovieList/MovieList.module.scss?f9f6","components/MovieList/MovieList.tsx","types/enums.ts","webpack://filmoteka/./src/components/SearchForm/SearchForm.module.scss?5dd0","components/SearchForm/SearchForm.tsx","pages/Search.tsx","services/moviesAPI.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Movie_link__TtNxb\",\"poster\":\"Movie_poster__O4gfr\",\"icon\":\"Movie_icon__zxB3-\",\"title\":\"Movie_title__9f19-\",\"score\":\"Movie_score__ya-UI\",\"info\":\"Movie_info__SpV5y\"};","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { getDataFromLocalStorage } from 'services/localStorage';\nimport { IMAGE_BASE_URL } from 'utils/constants';\n\nimport { FaBookmark } from 'react-icons/fa';\nimport { AiFillStar } from 'react-icons/ai';\nimport imagePlaceHolder from 'assets/images/image-place-holder.png';\nimport styles from './Movie.module.scss';\n\nimport type { IMovieProps } from './Movie.types';\n\nconst Movie = ({ movie, location }: IMovieProps) => {\n  const { id, title, poster_path, vote_average } = movie;\n  const imgUrl = poster_path ? IMAGE_BASE_URL + poster_path : imagePlaceHolder;\n\n  const data = getDataFromLocalStorage('movies');\n  const isSaved = Array.isArray(data) ? data.some(el => el.id === id) : false;\n\n  return (\n    <>\n      <Link className={styles.link} to={`/search/${id}`} state={{ from: location }}>\n        <img className={styles.poster} src={imgUrl} alt={title} loading=\"lazy\" />\n        {isSaved && <FaBookmark className={styles.icon} />}\n      </Link>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{title}</h3>\n        <p className={styles.score}>\n          {vote_average.toFixed(1)} <AiFillStar />\n        </p>\n      </div>\n    </>\n  );\n};\n\nMovie.propTypes = {\n  movie: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Movie;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__psP2f\",\"item\":\"MovieList_item__uj8y-\"};","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Movie from 'components/Movie';\nimport styles from './MovieList.module.scss';\n\nimport type { IMovieListProps } from './MovieList.types';\n\nconst MovieList = ({ movies }: IMovieListProps) => {\n  const location = useLocation();\n\n  return (\n    <ul className={styles.list}>\n      {movies.map(movie => (\n        <li className={styles.item} key={movie.id}>\n          <Movie movie={movie} location={location} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MovieList;\n","export const enum STATUS {\n  IDLE = 'idle',\n  PENDING = 'pending',\n  REJECTED = 'rejected',\n  RESOLVED = 'resolved',\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__49W6b\",\"searchField\":\"SearchForm_searchField__tZNSU\",\"btn\":\"SearchForm_btn__aI1lD\"};","import PropTypes from 'prop-types';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { GoSearch } from 'react-icons/go';\nimport styles from './SearchForm.module.scss';\nimport type { ISearchFormProps } from './SearchForm.types';\n\nconst SearchForm = ({ updateQueryString, searchQuery }: ISearchFormProps) => {\n  const [inputValue, setInputValue] = useState(searchQuery ?? '');\n  const { t } = useTranslation();\n\n  const handleChange = ({ target }: ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(target.value.trim());\n  };\n\n  const handleSubmit = (evt: FormEvent): void => {\n    evt.preventDefault();\n    updateQueryString(inputValue);\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <input\n        className={styles.searchField}\n        type=\"text\"\n        placeholder={`${t('search.title')}...`}\n        name=\"query\"\n        value={inputValue}\n        onChange={handleChange}\n      />\n      <button className={styles.btn} type=\"submit\">\n        <GoSearch />\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  updateQueryString: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string,\n};\n\nexport default SearchForm;\n","import { useState, useRef, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { toast, Id as ToastId } from 'react-toastify';\nimport { useQuery } from '@tanstack/react-query';\n\nimport SearchForm from 'components/SearchForm/';\nimport MovieList from 'components/MovieList';\nimport PageLoader from 'components/PageLoader';\nimport { getMoviesBySearchQuery } from 'services/moviesAPI';\nimport { STATUS } from 'types';\n\ntype SearchParams = { query: string } | {};\n\nconst Search = () => {\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const toastId = useRef<ToastId>();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') || '';\n\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  const fetchSearchResult = () => {\n    if (!searchQuery) {\n      return [];\n    }\n    setStatus(STATUS.PENDING);\n    return getMoviesBySearchQuery(searchQuery, language);\n  };\n\n  const { data: movies = [] } = useQuery({\n    queryKey: ['movie', searchQuery, language],\n    queryFn: fetchSearchResult,\n    onSuccess: data => {\n      setStatus(STATUS.RESOLVED);\n      // removing duplicate notifications\n      if (data?.length < 1 && toastId?.current && !toast.isActive(toastId?.current)) {\n        toastId.current = toast.error(t('search.message.failure'));\n      }\n    },\n    onError: (err: Error) => {\n      if (toastId?.current && !toast.isActive(toastId?.current)) {\n        toastId.current = toast.error(err?.message);\n      }\n      setStatus(STATUS.REJECTED);\n    },\n  });\n\n  const movieListMarkup = useMemo(() => <MovieList movies={movies} />, [movies]);\n\n  const updateQueryString = (query: string) => {\n    const newParams: SearchParams = query ? { query } : {};\n    setSearchParams(newParams);\n  };\n\n  return (\n    <>\n      <h1>{t('search.title')}</h1>\n      <SearchForm updateQueryString={updateQueryString} searchQuery={searchQuery} />\n      {status === STATUS.PENDING && <PageLoader />}\n      {movies?.length > 0 && movieListMarkup}\n      {status === STATUS.RESOLVED && !movies?.length && <p>{t('search.message.failure')}</p>}\n      {status === STATUS.REJECTED && <p>{t('search.message.error')}</p>}\n    </>\n  );\n};\n\nexport default Search;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY } from 'utils/constants';\nimport type { IMovie, IGenreList, IFoundMovies, IFoundReviews, FoundCredits } from 'types';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundMovies>('trending/movie/week', options).then(res => res.data.results);\n};\n\nexport const getGenreList = async (language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IGenreList>('genre/movie/list', options).then(res => res.data.genres);\n};\n\nexport const getMoviesBySearchQuery = async (query: string, language = 'en') => {\n  const options = {\n    params: { query, language },\n  };\n  return axios.get<IFoundMovies>('search/movie', options).then(res => res.data.results);\n};\n\nexport const getMoviesByGenre = async (genreId: string, language = 'en') => {\n  const options = {\n    params: {\n      with_genres: genreId,\n      sort_by: 'popularity.desc',\n      'vote_average.gte': 5,\n      'primary_release_date.gte': '2010-01-01',\n      language,\n    },\n  };\n\n  return axios.get<IFoundMovies>('discover/movie', options).then(res => res.data.results);\n};\n\nexport const getMovieDetails = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n\n  return axios.get<IMovie>(`movie/${id}`, options).then(res => res.data);\n};\n\nexport const getMovieCredits = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<FoundCredits>(`movie/${id}/credits`, options).then(res => res.data.cast);\n};\n\nexport const getMovieReviews = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get<IFoundReviews>(`movie/${id}/reviews`, options).then(res => res.data.results);\n};\n\nexport const getVideos = async (id: string, language = 'en') => {\n  const options = {\n    params: { language },\n  };\n  return axios.get(`movie/${id}/videos`, options).then(res => res.data.results);\n};\n"],"names":["movie","location","id","title","poster_path","vote_average","imgUrl","IMAGE_BASE_URL","imagePlaceHolder","data","getDataFromLocalStorage","isSaved","Array","isArray","some","el","className","styles","to","state","from","src","alt","loading","toFixed","movies","useLocation","map","Movie","STATUS","updateQueryString","searchQuery","useState","inputValue","setInputValue","t","useTranslation","onSubmit","evt","preventDefault","autoComplete","type","placeholder","name","value","onChange","target","trim","IDLE","status","setStatus","toastId","useRef","useSearchParams","searchParams","setSearchParams","get","language","i18n","useQuery","queryKey","queryFn","PENDING","getMoviesBySearchQuery","onSuccess","RESOLVED","length","current","toast","onError","err","message","REJECTED","movieListMarkup","useMemo","MovieList","query","PageLoader","axios","BASE_URL","api_key","API_KEY","getTrendingMovies","options","params","then","res","results","getGenreList","genres","getMoviesByGenre","genreId","with_genres","sort_by","getMovieDetails","getMovieCredits","cast","getMovieReviews","getVideos"],"sourceRoot":""}